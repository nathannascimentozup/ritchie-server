version: 2.1

references:
  images:
    go: &GOLANG_IMAGE cimg/go:1.14
    python: &PYTHON_IMAGE circleci/python:2.7-stretch
    ci_machine: &CI_MACHINE_IMAGE ubuntu-1604:201903-01
    ruby: &RUBY_IMAGE cimg/ruby:2.6.5

  paths:
    test-results: &TEST_RESULTS_DIR bin

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GIT_EMAIL : "zup-ci@zup.com.br"
    GIT_USERNAME: "zup-ci"
    GIT_NAME: "Zup CI"
    BUILD_IMAGE: *GOLANG_IMAGE
    VERSION_PLACEHOLDER: 1.0.0-betaPLACEHOLDER

  filters: &FILTERS_DELIVERY
    branches:
      only:
        - qa
        - beta

  filters-checks: &FILTERS_CHECK_CODE
    branches:
      only:
        - master
        - /^feature.*/
        - /^pull\/.*$/

  filters-release: &FILTERS_RELEASE
    branches:
      only:
        - /^release-.*/

executors:
  ritchie-server-executor:
    machine:
      image: *CI_MACHINE_IMAGE
    working_directory: ~/workspace

  horus-executor:
    machine:
      image: ubuntu-1604:202004-01

  ritchie-executor:
    docker:
      - image: *GOLANG_IMAGE
        user: root
    working_directory: ~/workspace

  release-executor:
    docker:
      - image: *RUBY_IMAGE
        user: root
    working_directory: /workspace

  delivery-executor:
    docker:
      - image: *PYTHON_IMAGE
        user: root
    working_directory: /workspace

jobs:
  lint:
    executor: ritchie-executor
    steps:
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b go/bin/ v1.24.0
      - run: go mod download
      - run:
          name: lint
          command: |
            go/bin/golangci-lint run
  unit_test:
    executor: ritchie-server-executor
    environment:
      <<: *ENVIRONMENT
    steps:

      - checkout

      - run:
          name: Running test
          command: |
            mkdir -p $TEST_RESULTS_DIR
            docker-compose -f docker-compose-ci.yml run server

      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - run:
          name: codecov upload
          when: always
          command: bash <(curl -s https://codecov.io/bash)

  horus:
    executor: horus-executor
    steps:
      - checkout
      - run:
          name: Horus Security Analysis
          command: |
            curl -fsSL https://horus-assets.s3.amazonaws.com/install.sh | bash
            horus start -p ./ -i testdata

  build:
    executor: ritchie-executor
    branches:
    steps:
      - checkout
      - run:
          name: Running build
          command: |
            make build
      - persist_to_workspace:
          root: .
          paths:
            - bin
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  release_creator:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Checking if we need to release any new features
          command: |
            make release-creator

  rebase_beta:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Rebase Beta
          command: |
            make rebase-beta

  build_container:
    executor: ritchie-server-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Creating docker image
          command: |
            . ./.circleci/scripts/version.sh
            make build-container

  delivery_hub:
    executor: ritchie-server-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Creating docker image
          command: |
            . ./.circleci/scripts/version.sh
            make build-container
      - run:
          name: Pushing docker image to Dockerhub
          command: |
            . ./.circleci/scripts/version.sh
            . ./.circleci/scripts/credentials.sh
            make delivery-hub

#  delivery_ecr:
#    executor: ritchie-server-executor
#    environment:
#      <<: *ENVIRONMENT
#    steps:
#      - checkout
#      - attach_workspace:
#          at: ~/workspace
#      - run:
#          name: Creating docker image
#          command: |
#            . ./.circleci/scripts/version.sh
#            . ./.circleci/scripts/registry.sh
#            make build-container
#      - run:
#          name: Pushing docker image to registry ECR
#          command: |
#            . ./.circleci/scripts/version.sh
#            . ./.circleci/scripts/registry.sh
#            . ./.circleci/scripts/credentials.sh
#            make delivery-ecr

  release:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            . ./.circleci/scripts/version.sh
            make release

  persist_release:
    environment:
      <<: *ENVIRONMENT
    executor: delivery-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            pip install awscli
            . ./.circleci/scripts/credentials.sh
            . ./.circleci/scripts/version.sh
            make delivery-file


workflows:
  release_trigger:
    triggers:
      - schedule:
          cron: "0 13 * * 1"
          filters:
            branches:
              only:
                - beta
    jobs:
      - release_creator
  beta:
    triggers:
      - schedule:
          cron: "0 11 * * 2,4"
          filters:
            branches:
              only:
                - master
    jobs:
      - rebase_beta:
          name: release-beta
  build-for-requests:
    jobs:
      - lint:
          filters:
            <<: *FILTERS_CHECK_CODE
      - horus:
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - lint
      - unit_test:
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - horus
      - build:
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - unit_test
  release:
    jobs:
      - build:
          filters:
            <<: *FILTERS_RELEASE
      - build_container:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - build
#      - delivery_ecr:
#          filters:
#            <<: *FILTERS_RELEASE
#          requires:
#            - build_container
      - delivery_hub:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - build_container
      - release:
          name: release-publish
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - delivery_hub
#            - delivery_ecr
      - persist_release:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - release-publish
  delivery:
    jobs:
      - build:
          filters:
            <<: *FILTERS_DELIVERY
      - build_container:
          filters:
            <<: *FILTERS_DELIVERY
          requires:
            - build
#      - delivery_ecr:
#          filters:
#            <<: *FILTERS_DELIVERY
#          requires:
#            - build_container
      - delivery_hub:
          filters:
            <<: *FILTERS_DELIVERY
          requires:
            - build_container